#include<stdio.h>
#include<stdlib.h>
#include<string.h>
//#define STR_SIZE 80

char * hexa_to_bin(char hexa[1000]);
char* substring(char *destination, char *source, int beg, int n);
int convert(long long n );
int power(int base, int expo);
void printarray(int arr[], int m);

int main(int argc, char *argv[])
{

    char filetext[100]; 

    FILE *fp; 
    //fp=fopen(argv[6],"r");
    //fseek(fp,0,SEEK_SET);
    fp=fopen(argv[3],"r");
   
    
    int i;
    int m=atoi(argv[2]);
    int prec_arr[power(2,m)];

    char actual_val; 
    char predicted_val; 

    float mispredict=0; 
    float total=0; 

    if (strcasecmp(argv[1],"bimodal")==0)
   {     
      // Creating an array of pow(2,m)
    

    
    for (i=0;i<power(2,m);i++)
    {
        //printf("%d ",i);    
        prec_arr[i]=4;
    }




    while (fgets (filetext, 100, fp))
    {    
    
           //fgets (filetext, 100, fp);
    //        printf("%s \t",filetext);
            //*s=hexa_to_bin(filetext);
            char* s=hexa_to_bin(filetext);
    //        printf("%s \t",s);
            
            actual_val=filetext[7];
            //total++;
            //printf("%c",actual_val);




            static char new_str[200];
            strcpy(new_str, s);
            static char new_new_str[200]="";
            substring(new_new_str,new_str,24-2-m,m);    // need to change 
            
    //        printf("Substring is %s \t",new_new_str);
            
            long long deci; 
            sscanf(new_new_str, "%lld", &deci); 
            int converted_deci=convert(deci);
            //printf("%d \n", converted_deci); 
    //        printf("%d \t",convert(deci));

            //printf("%d \n",prec_arr[converted_deci]);
            //printf("%d", converted_deci);

            if (prec_arr[converted_deci]>=4)
                predicted_val='t';
            else
                predicted_val='n';

            if (actual_val!=predicted_val)
                {
                    mispredict++;
                    //printf("%d",mispredict);
                }


            if(actual_val=='t' && prec_arr[converted_deci]<7)
                prec_arr[converted_deci]++;

            else if ( actual_val=='n' && prec_arr[converted_deci]>0)
                prec_arr[converted_deci]--;


            total++;


            //break;
            
        
    }


}


//Gshare 







    fclose(fp); 

    printf("OUTPUT\n");
    printf("number of predictions:      %.0f\n",total);
    printf("number of mispredictions:   %.0f\n",mispredict);

    //printf("%d",mispredict/total);
    float misprec_ratio; 
    misprec_ratio=(mispredict/total);
    //printf("%f\n",misprec_ratio);
    printf("misprediction rate:         %.2f%\n",misprec_ratio*100);
    printf("FINAL BIMODAL CONTENTS\n");

    //int index;

    
    /*for(int i=0; i<=power(2,m); i++)
    {
        printf("%d \t",prec_arr[i]);
    }*/
    

    printarray(prec_arr,m);

/*    for(int i=0;i<64;i++)
    {
        printf("%d ",i);
       // printf("%d \n",prec_arr[index]);
    }*/
    
    return 0;
}


void printarray(int prec_arr[], int m)
{   

    int i=0;
    //printf("%d\t", i);
    //printf("%d\n",prec_arr[i]);
    while( i<power(2,m))
    {
        printf("%d \t",i);
        printf("%d \n",prec_arr[i]);
        i++;
    }


/*
    for (int i=0;i<power(2,m);i++)
    {
        printf("%d \t",i);
        printf("%d \n",prec_arr[i]);
    }*/
}

int convert(long long n) {
    int dec = 0, i = 0, rem;
    while (n != 0) {
        rem = n % 10;
        n /= 10;
        dec += rem * power(2, i);
        ++i;
    }
    return dec;
}

int power(int base, int exponent)
{
int result=1;
for (exponent; exponent>0; exponent--)
{
result = result * base;
}
return result;
}


char* substring(char *destination, char *source, int beg, int n)
{
    // extracts n characters from source string starting from beg index
    // and copy them into the destination string
    while (n > 0)
    {
        *destination = *(source + beg);

        destination++;
        source++;
        n--;
    }

    // null terminate destination string
    *destination = '\0';

    // return the destination string
    return destination;
}


char *  hexa_to_bin(char hexa[1000])
{
    
    //hexa[1000]; 
    long int i=0;   
    //hexa="302d28"; 
    //scanf("%s",hexa);
    //printf("%s\n", hexa);
    //strncpy( full_str, "", strSize );
    char *mam="";
    static char full_str[200];
    strcpy(full_str, mam);
        while (hexa[i])

    {

        switch (hexa[i])

        {

        case '0':

            strcat(full_str,"0000"); break;

        case '1':

            strcat(full_str,"0001"); break;

        case '2':

            strcat(full_str,"0010"); break;

        case '3':

            strcat(full_str,"0011"); break;

        case '4':

            strcat(full_str,"0100"); break;

        case '5':

            strcat(full_str,"0101"); break;

        case '6':

            strcat(full_str,"0110"); break;

        case '7':

            strcat(full_str,"0111"); break;

        case '8':

            strcat(full_str,"1000"); break;

        case '9':

            strcat(full_str,"1001"); break;

        case 'A':

            strcat(full_str,"1010"); break;

        case 'B':

            strcat(full_str,"1011"); break;

        case 'C':

            strcat(full_str,"1100"); break;

        case 'D':

            strcat(full_str,"1101"); break;

        case 'E':

            strcat(full_str,"1110"); break;

        case 'F':

            strcat(full_str,"1111"); break;

        case 'a':

            strcat(full_str,"1010"); break;

        case 'b':

            strcat(full_str,"1011"); break;

        case 'c':

            strcat(full_str,"1100"); break;

        case 'd':

            strcat(full_str,"1101"); break;

        case 'e':

            strcat(full_str,"1110"); break;

        case 'f':

            strcat(full_str,"1111"); break;

        }

        i++;

    }
    char *t=full_str;
    //printf("%s",full_str);
    return t;
}